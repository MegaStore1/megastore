// <auto-generated />
using System;
using MegaStore.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MegaStore.API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230430132255_CompanyPlantsAdded")]
    partial class CompanyPlantsAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.3");

            modelBuilder.Entity("MegaStore.API.Models.Core.CountryModel.Country", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("countryCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("countryName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("creationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("creationUserId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("updateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("updateUserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.ToTable("mscCountry");
                });

            modelBuilder.Entity("MegaStore.API.Models.Core.CountryModel.State", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("countryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("creationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("creationUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("stateCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("stateName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("updateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("updateUserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("countryId");

                    b.ToTable("mscState");
                });

            modelBuilder.Entity("MegaStore.API.Models.Core.Module", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("creationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("creationUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("moduleName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("updateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("updateUserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.ToTable("mscModule");
                });

            modelBuilder.Entity("MegaStore.API.Models.Core.ModulePage", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("creationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("creationUserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("moduleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("pageName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("updateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("updateUserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("moduleId");

                    b.ToTable("mscModulePage");
                });

            modelBuilder.Entity("MegaStore.API.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsMain")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("creationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("creationUserId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("updateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("updateUserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("msuPhoto");
                });

            modelBuilder.Entity("MegaStore.API.Models.Settings.Company.Company", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("companyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("creationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("creationUserId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("updateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("updateUserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.ToTable("msstCompany");
                });

            modelBuilder.Entity("MegaStore.API.Models.Settings.Company.Plant", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("companyid")
                        .HasColumnType("INTEGER");

                    b.Property<int>("compnayId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("creationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("creationUserId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("lat")
                        .HasColumnType("INTEGER");

                    b.Property<long>("lng")
                        .HasColumnType("INTEGER");

                    b.Property<string>("plantName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("updateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("updateUserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("companyid");

                    b.ToTable("msstPlant");
                });

            modelBuilder.Entity("MegaStore.API.Models.Shared.UserRoles", b =>
                {
                    b.Property<int>("pageId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("userId")
                        .HasColumnType("INTEGER");

                    b.HasKey("pageId", "userId");

                    b.HasIndex("userId");

                    b.ToTable("mssUserRoles");
                });

            modelBuilder.Entity("MegaStore.API.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("creationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("creationUserId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("updateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("updateUserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("msuUser");
                });

            modelBuilder.Entity("MegaStore.API.Models.Core.CountryModel.State", b =>
                {
                    b.HasOne("MegaStore.API.Models.Core.CountryModel.Country", "country")
                        .WithMany("States")
                        .HasForeignKey("countryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("country");
                });

            modelBuilder.Entity("MegaStore.API.Models.Core.ModulePage", b =>
                {
                    b.HasOne("MegaStore.API.Models.Core.Module", "module")
                        .WithMany("pages")
                        .HasForeignKey("moduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("module");
                });

            modelBuilder.Entity("MegaStore.API.Models.Photo", b =>
                {
                    b.HasOne("MegaStore.API.Models.User", "User")
                        .WithMany("Photos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MegaStore.API.Models.Settings.Company.Plant", b =>
                {
                    b.HasOne("MegaStore.API.Models.Settings.Company.Company", "company")
                        .WithMany("plants")
                        .HasForeignKey("companyid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("company");
                });

            modelBuilder.Entity("MegaStore.API.Models.Shared.UserRoles", b =>
                {
                    b.HasOne("MegaStore.API.Models.Core.ModulePage", "page")
                        .WithMany()
                        .HasForeignKey("pageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MegaStore.API.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("page");

                    b.Navigation("user");
                });

            modelBuilder.Entity("MegaStore.API.Models.Core.CountryModel.Country", b =>
                {
                    b.Navigation("States");
                });

            modelBuilder.Entity("MegaStore.API.Models.Core.Module", b =>
                {
                    b.Navigation("pages");
                });

            modelBuilder.Entity("MegaStore.API.Models.Settings.Company.Company", b =>
                {
                    b.Navigation("plants");
                });

            modelBuilder.Entity("MegaStore.API.Models.User", b =>
                {
                    b.Navigation("Photos");
                });
#pragma warning restore 612, 618
        }
    }
}
